document.addEventListener('DOMContentLoaded', () => {
    // Chatbot functionality
    const chatWindow = document.getElementById('chat-window');
    const chatInput = document.getElementById('chat-input');
    const sendChatBtn = document.getElementById('send-chat-btn');
    const clearChatBtn = document.getElementById('clear-chat-btn');
    const suggestionButtonsContainer = document.querySelector('.suggestion-buttons');

    // Tab functionality
    const chatbotTabBtn = document.getElementById('chatbot-tab-btn');
    const articlesTabBtn = document.getElementById('articles-tab-btn');
    const quizTabBtn = document.getElementById('quiz-tab-btn');

    const chatbotSection = document.getElementById('chatbot-section');
    const learnArticlesSection = document.getElementById('learn-articles-section');
    const quizSection = document.getElementById('quiz-section');

    // Knowledge Hub Elements
    const categoryFilter = document.getElementById('category-filter');
    const difficultyFilter = document.getElementById('difficulty-filter');
    const articlesCountDisplay = document.getElementById('articles-count');
    const learnArticlesGrid = document.getElementById('learn-articles-grid');

    // Initialize chat history from session storage or an empty array
    let chatHistory = JSON.parse(sessionStorage.getItem('learnChatHistory') || '[]');

    // Placeholder for learning articles data (will be generated by backend or static)
    // This structure matches the mockup's learn article cards
    const learningArticlesData = [
        {
            id: 'learn-1',
            category: 'Fundamentals',
            difficulty: 'Beginner',
            title: 'What is Media Literacy?',
            read_time: '5 min read',
            summary: 'Understanding the fundamental skills needed to navigate today\'s information landscape.',
            full_content: { /* ... full content for this article ... */ }
        },
        {
            id: 'learn-2',
            category: 'Source Evaluation',
            difficulty: 'Beginner',
            title: 'Identifying Reliable Sources',
            read_time: '8 min read',
            summary: 'Learn how to evaluate the credibility and trustworthiness of information sources.',
            full_content: { /* ... full content for this article ... */ }
        },
        {
            id: 'learn-3',
            category: 'Bias Detection',
            difficulty: 'Intermediate',
            title: 'Spotting Bias in News Reports',
            read_time: '10 min read',
            summary: 'Recognize different types of bias and how they can influence reporting.',
            full_content: { /* ... full content for this article ... */ }
        },
        {
            id: 'learn-4',
            category: 'Fact Checking',
            difficulty: 'Intermediate',
            title: 'Fact-Checking Techniques',
            read_time: '12 min read',
            summary: 'Professional methods for verifying information and debunking false claims.',
            full_content: { /* ... full content for this article ... */ }
        },
        {
            id: 'learn-5',
            category: 'Source Verification',
            difficulty: 'Advanced',
            title: 'Advanced Source Verification',
            read_time: '15 min read',
            summary: 'Deep dive into sophisticated techniques used by professional journalists.',
            full_content: { /* ... full content for this article ... */ }
        },
    ];

    // Function to render markdown (using a simple regex for bold, italic, lists)
    function renderMarkdown(text) {
        // Bold
        text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        // Italic
        text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
        // Headings (basic)
        text = text.replace(/^### (.*)$/gm, '<h3>$1</h3>');
        text = text.replace(/^## (.*)$/gm, '<h2>$1</h2>');
        text = text.replace(/^# (.*)$/gm, '<h1>$1</h1>');
        // Unordered lists
        text = text.replace(/^- (.*)$/gm, '<li>$1</li>');
        if (text.includes('<li>')) {
            text = `<ul>${text}</ul>`;
        }
        // Newlines to breaks
        text = text.replace(/\n/g, '<br>');
        return text;
    }

    function addMessageToChat(message, sender) {
        const messageWrapper = document.createElement('div');
        messageWrapper.classList.add('chat-message-wrapper', `${sender}-message-wrapper`);

        const avatar = document.createElement('img');
        avatar.classList.add('chat-avatar');
        avatar.src = sender === 'user' ? 'https://placehold.co/35x35/CCCCCC/333333?text=You' : '{{ url_for('static', filename='img/logo.jpg') }}'; // Use logo for bot
        avatar.alt = sender === 'user' ? 'User Avatar' : 'Bot Avatar';

        const messageDiv = document.createElement('div');
        messageDiv.classList.add('chat-message', `${sender}-message`);
        messageDiv.innerHTML = renderMarkdown(message); // Render markdown for display

        if (sender === 'user') {
            messageWrapper.appendChild(messageDiv);
            messageWrapper.appendChild(avatar);
        } else {
            messageWrapper.appendChild(avatar);
            messageWrapper.appendChild(messageDiv);
        }

        chatWindow.appendChild(messageWrapper);
        chatWindow.scrollTop = chatWindow.scrollHeight; // Auto-scroll to the bottom
    }

    async function sendChatMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        addMessageToChat(message, 'user');
        chatInput.value = '';

        chatHistory.push({ role: 'user', parts: [{ text: message }] });
        sessionStorage.setItem('learnChatHistory', JSON.stringify(chatHistory));

        sendChatBtn.disabled = true;

        const useOwnApiKey = localStorage.getItem('useOwnApiKey') === 'true';
        let headers = { 'Content-Type': 'application/json' };
        if (useOwnApiKey) {
            const userGeminiApiKey = sessionStorage.getItem('userGeminiApiKey');
            if (!userGeminiApiKey) {
                window.showApiKeyPopup();
                addMessageToChat("Error: Gemini API key is missing. Please provide it.", "bot");
                sendChatBtn.disabled = false;
                return;
            }
            headers['X-User-Gemini-API-Key'] = userGeminiApiKey;
        }

        try {
            const response = await fetch('/api/chatbot_message', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ message: message, history: chatHistory })
            });

            if (!response.ok) {
                const errorData = await response.json();
                if (response.status === 401) {
                    window.showApiKeyPopup();
                    addMessageToChat("Error: API keys are missing or invalid. Please enter them to use the chatbot.", "bot");
                } else {
                    throw new Error(errorData.message || 'Failed to get response from chatbot.');
                }
            }
            const data = await response.json();
            addMessageToChat(data.response, 'bot');
            chatHistory = data.history;
            sessionStorage.setItem('learnChatHistory', JSON.stringify(chatHistory));

        } catch (error) {
            console.error('Error sending chat message:', error);
            addMessageToChat("Sorry, I'm having trouble responding right now. Please try again.", "bot");
        } finally {
            sendChatBtn.disabled = false;
        }
    }

    sendChatBtn.addEventListener('click', sendChatMessage);
    chatInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            sendChatMessage();
        }
    });

    // Clear Chat functionality
    clearChatBtn.addEventListener('click', () => {
        chatWindow.innerHTML = '';
        chatHistory = [];
        sessionStorage.removeItem('learnChatHistory');
        addMessageToChat("Chat cleared. How can I help you learn today?", "bot");
    });

    // "Try asking" suggestions
    if (suggestionButtonsContainer) {
        suggestionButtonsContainer.addEventListener('click', (event) => {
            if (event.target.classList.contains('suggestion-btn')) {
                chatInput.value = event.target.dataset.suggestion;
                sendChatMessage();
            }
        });
    }

    // Load initial chat history when page loads
    function loadChatHistory() {
        if (chatHistory.length > 0) {
            chatHistory.forEach(entry => {
                if (entry.role === 'user') {
                    addMessageToChat(entry.parts[0].text, 'user');
                } else if (entry.role === 'model') {
                    addMessageToChat(entry.parts[0].text, 'bot');
                }
            });
        } else {
            addMessageToChat("Hello! I'm your Media Mentor. I'm here to help you learn about media literacy, fact-checking, identifying bias, and navigating information online. What would you like to know?", "bot");
        }
    }
    loadChatHistory();


    // Tab functionality for Learn page
    function showTab(tabName) {
        chatbotSection.style.display = 'none';
        learnArticlesSection.style.display = 'none';
        quizSection.style.display = 'none';

        chatbotTabBtn.classList.remove('active');
        articlesTabBtn.classList.remove('active');
        quizTabBtn.classList.remove('active');

        if (tabName === 'chatbot') {
            chatbotSection.style.display = 'block';
            chatbotTabBtn.classList.add('active');
        } else if (tabName === 'articles') {
            learnArticlesSection.style.display = 'block';
            articlesTabBtn.classList.add('active');
            renderLearningArticles(); // Render articles when this tab is shown
        } else if (tabName === 'quiz') {
            quizSection.style.display = 'block';
            quizTabBtn.classList.add('active');
        }
    }

    chatbotTabBtn.addEventListener('click', () => showTab('chatbot'));
    articlesTabBtn.addEventListener('click', () => showTab('articles'));
    quizTabBtn.addEventListener('click', () => showTab('quiz'));

    // Knowledge Hub (Learn Articles) Rendering
    function createLearningArticleCard(article) {
        const card = document.createElement('div');
        card.classList.add('learn-article-card');
        card.addEventListener('click', () => {
            // For now, navigate to a placeholder or actual article page if available
            // For learning articles, you might have static content or a different detail view
            window.location.href = `/article/${article.id}`; // Assuming learn articles also get IDs and a detail page
        });

        const categoryClass = article.category ? article.category.toLowerCase().replace(' ', '-') : 'general';
        const difficultyClass = article.difficulty ? article.difficulty.toLowerCase().replace(' ', '-') : 'beginner';

        card.innerHTML = `
            <div class="tags-container">
                <span class="category-tag ${categoryClass}">${article.category}</span>
                <span class="difficulty-tag ${difficultyClass}">${article.difficulty}</span>
            </div>
            <h3>${article.title}</h3>
            <p class="read-time">${article.read_time}</p>
            <a href="/article/${article.id}" class="read-article-link">
                Read Article <i class="fas fa-arrow-right"></i>
            </a>
        `;
        return card;
    }

    function renderLearningArticles() {
        const selectedCategory = categoryFilter.value;
        const selectedDifficulty = difficultyFilter.value;

        const filteredArticles = learningArticlesData.filter(article => {
            const matchesCategory = selectedCategory === 'all' || article.category.toLowerCase().replace(' ', '-') === selectedCategory;
            const matchesDifficulty = selectedDifficulty === 'all' || article.difficulty.toLowerCase().replace(' ', '-') === selectedDifficulty;
            return matchesCategory && matchesDifficulty;
        });

        learnArticlesGrid.innerHTML = ''; // Clear existing articles
        if (filteredArticles.length > 0) {
            filteredArticles.forEach(article => {
                learnArticlesGrid.appendChild(createLearningArticleCard(article));
            });
            articlesCountDisplay.textContent = `Showing ${filteredArticles.length} of ${learningArticlesData.length} articles`;
        } else {
            learnArticlesGrid.innerHTML = '<p class="info-message">No articles found matching your filters.</p>';
            articlesCountDisplay.textContent = `Showing 0 of ${learningArticlesData.length} articles`;
        }
    }

    // Filter event listeners
    categoryFilter.addEventListener('change', renderLearningArticles);
    difficultyFilter.addEventListener('change', renderLearningArticles);

    // Initial load of chatbot and articles
    showTab('chatbot'); // Show chatbot tab by default
    renderLearningArticles(); // Render initial learning articles
});